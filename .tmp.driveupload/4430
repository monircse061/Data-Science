{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from numpy import mean\n",
    "from numpy import std\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import accuracy_score,classification_report,confusion_matrix\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.svm import SVC\n",
    "from catboost import CatBoostClassifier\n",
    "from sklearn import preprocessing\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import RepeatedStratifiedKFold\n",
    "import shap\n",
    "df = pd.read_csv('C:/Users/m/Desktop/Thesis Tasks/Jupyter Lab/Mental Health/Mental health.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Worry_about_social_support_during_covid19</th>\n",
       "      <th>Residence</th>\n",
       "      <th>Stable_family_income</th>\n",
       "      <th>Living_with_parents</th>\n",
       "      <th>Relative_or_acquaintance_infected_with_covid19</th>\n",
       "      <th>Worry_about_academic_delay</th>\n",
       "      <th>Disruption_of_daily_life</th>\n",
       "      <th>Exercise_during_covid19</th>\n",
       "      <th>Own_income</th>\n",
       "      <th>Quarrel_between_parents</th>\n",
       "      <th>Sleep_status_hour_during_covid19</th>\n",
       "      <th>Internet_browsing_hours_during_covid19</th>\n",
       "      <th>Fear_of_getting_infected_with_covid19</th>\n",
       "      <th>Mental_Health_Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Urban</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Moderate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Rural</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Moderate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Absent</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Moderate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Female</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Poor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Moderate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>248</th>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Moderate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249</th>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Rural</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Moderate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>250</th>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Moderate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>251</th>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Rural</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Poor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>252</th>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Rural</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>Better</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>253 rows Ã— 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gender Worry_about_social_support_during_covid19 Residence  \\\n",
       "0      Male                                       Yes     Urban   \n",
       "1      Male                                       Yes     Rural   \n",
       "2      Male                                       Yes     Urban   \n",
       "3    Female                                       Yes     Urban   \n",
       "4      Male                                       Yes     Urban   \n",
       "..      ...                                       ...       ...   \n",
       "248    Male                                       Yes     Urban   \n",
       "249    Male                                       Yes     Rural   \n",
       "250    Male                                        No     Urban   \n",
       "251    Male                                       Yes     Rural   \n",
       "252    Male                                        No     Rural   \n",
       "\n",
       "    Stable_family_income Living_with_parents  \\\n",
       "0                     No                 Yes   \n",
       "1                    Yes                 Yes   \n",
       "2                    Yes                  No   \n",
       "3                    Yes                 Yes   \n",
       "4                    Yes                 Yes   \n",
       "..                   ...                 ...   \n",
       "248                  Yes                 Yes   \n",
       "249                   No                 Yes   \n",
       "250                  Yes                 Yes   \n",
       "251                   No                  No   \n",
       "252                   No                  No   \n",
       "\n",
       "    Relative_or_acquaintance_infected_with_covid19 Worry_about_academic_delay  \\\n",
       "0                                              Yes                        Yes   \n",
       "1                                              Yes                        Yes   \n",
       "2                                              Yes                        Yes   \n",
       "3                                               No                        Yes   \n",
       "4                                               No                        Yes   \n",
       "..                                             ...                        ...   \n",
       "248                                            Yes                        Yes   \n",
       "249                                            Yes                        Yes   \n",
       "250                                             No                        Yes   \n",
       "251                                             No                        Yes   \n",
       "252                                             No                        Yes   \n",
       "\n",
       "    Disruption_of_daily_life Exercise_during_covid19 Own_income  \\\n",
       "0                        Yes                      No        Yes   \n",
       "1                        Yes                      No         No   \n",
       "2                        Yes                      No         No   \n",
       "3                        Yes                      No         No   \n",
       "4                        Yes                      No         No   \n",
       "..                       ...                     ...        ...   \n",
       "248                      Yes                     Yes         No   \n",
       "249                      Yes                      No         No   \n",
       "250                      Yes                      No         No   \n",
       "251                      Yes                      No         No   \n",
       "252                       No                      No         No   \n",
       "\n",
       "    Quarrel_between_parents  Sleep_status_hour_during_covid19  \\\n",
       "0                        No                                 2   \n",
       "1                        No                                 2   \n",
       "2                    Absent                                 1   \n",
       "3                       Yes                                 2   \n",
       "4                        No                                 3   \n",
       "..                      ...                               ...   \n",
       "248                      No                                 1   \n",
       "249                      No                                 2   \n",
       "250                      No                                 2   \n",
       "251                      No                                 2   \n",
       "252                      No                                 2   \n",
       "\n",
       "     Internet_browsing_hours_during_covid19  \\\n",
       "0                                         3   \n",
       "1                                         4   \n",
       "2                                         3   \n",
       "3                                         3   \n",
       "4                                         4   \n",
       "..                                      ...   \n",
       "248                                       4   \n",
       "249                                       3   \n",
       "250                                       3   \n",
       "251                                       4   \n",
       "252                                       1   \n",
       "\n",
       "    Fear_of_getting_infected_with_covid19 Mental_Health_Status  \n",
       "0                                     Yes             Moderate  \n",
       "1                                     Yes             Moderate  \n",
       "2                                     Yes             Moderate  \n",
       "3                                     Yes                 Poor  \n",
       "4                                     Yes             Moderate  \n",
       "..                                    ...                  ...  \n",
       "248                                   Yes             Moderate  \n",
       "249                                   Yes             Moderate  \n",
       "250                                   Yes             Moderate  \n",
       "251                                   Yes                 Poor  \n",
       "252                                    No               Better  \n",
       "\n",
       "[253 rows x 15 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 253 entries, 0 to 252\n",
      "Data columns (total 15 columns):\n",
      " #   Column                                          Non-Null Count  Dtype \n",
      "---  ------                                          --------------  ----- \n",
      " 0   Gender                                          253 non-null    object\n",
      " 1   Worry_about_social_support_during_covid19       253 non-null    object\n",
      " 2   Residence                                       253 non-null    object\n",
      " 3   Stable_family_income                            253 non-null    object\n",
      " 4   Living_with_parents                             253 non-null    object\n",
      " 5   Relative_or_acquaintance_infected_with_covid19  253 non-null    object\n",
      " 6   Worry_about_academic_delay                      253 non-null    object\n",
      " 7   Disruption_of_daily_life                        253 non-null    object\n",
      " 8   Exercise_during_covid19                         253 non-null    object\n",
      " 9   Own_income                                      253 non-null    object\n",
      " 10  Quarrel_between_parents                         253 non-null    object\n",
      " 11  Sleep_status_hour_during_covid19                253 non-null    int64 \n",
      " 12  Internet_browsing_hours_during_covid19          253 non-null    int64 \n",
      " 13  Fear_of_getting_infected_with_covid19           253 non-null    object\n",
      " 14  Mental_Health_Status                            253 non-null    object\n",
      "dtypes: int64(2), object(13)\n",
      "memory usage: 29.8+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Output column unique value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Moderate    117\n",
       "Poor         87\n",
       "Better       49\n",
       "Name: Mental_Health_Status, dtype: int64"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Mental_Health_Status.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pie(df.Mental_Health_Status.value_counts(), labels = ['Moderate','Poor','Better'],colors = ['#FF5733','#FFBF00','#6495ED'],autopct='%1.1f%%',shadow=True, explode=(0.05, 0.05, 0.05))\n",
    "plt.title('Mental Health Status')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_unique_col_values(df):\n",
    "       for column in df:\n",
    "                print(f'{column}: {df[column].unique()}') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Features Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "def categorical_column_viz(col_name):\n",
    "    \n",
    "    f,ax = plt.subplots(1,2, figsize=(10,6))\n",
    "  \n",
    "    # Count Plot\n",
    "    df[col_name].value_counts().plot.bar(cmap='Set2',ax=ax[0])\n",
    "    ax[1].set_title(f'Number of Students by {col_name}')\n",
    "    ax[1].set_ylabel('Count')\n",
    "    ax[1].set_xlabel(f'{col_name}')\n",
    "    \n",
    "    # Attrition Count per factors\n",
    "    sns.countplot(col_name, hue='Mental_Health_Status',data=df, ax=ax[1], palette='Set2')\n",
    "    ax[1].set_title(f'Mental Health Status by {col_name}')\n",
    "    ax[1].set_xlabel(f'{col_name}')\n",
    "    ax[1].set_ylabel('Count')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "categorical_column_viz('Gender')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "categorical_column_viz('Disruption_of_daily_life')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gender: ['Male' 'Female']\n",
      "Worry_about_social_support_during_covid19: ['Yes' 'No']\n",
      "Residence: ['Urban' 'Rural']\n",
      "Stable_family_income: ['No' 'Yes']\n",
      "Living_with_parents: ['Yes' 'No']\n",
      "Relative_or_acquaintance_infected_with_covid19: ['Yes' 'No']\n",
      "Worry_about_academic_delay: ['Yes' 'No']\n",
      "Disruption_of_daily_life: ['Yes' 'No']\n",
      "Exercise_during_covid19: ['No' 'Yes']\n",
      "Own_income: ['Yes' 'No']\n",
      "Quarrel_between_parents: ['No' 'Absent' 'Yes']\n",
      "Sleep_status_hour_during_covid19: [2 1 3]\n",
      "Internet_browsing_hours_during_covid19: [3 4 2 1]\n",
      "Fear_of_getting_infected_with_covid19: ['Yes' 'No']\n",
      "Mental_Health_Status: ['Moderate' 'Poor' 'Better']\n"
     ]
    }
   ],
   "source": [
    "print_unique_col_values(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Label Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "label_encoder =  preprocessing.LabelEncoder()\n",
    "df['Gender'] = label_encoder.fit_transform(df['Gender'])\n",
    "df['Worry_about_social_support_during_covid19'] = label_encoder.fit_transform(df['Worry_about_social_support_during_covid19'])\n",
    "df['Residence'] = label_encoder.fit_transform(df['Residence'])\n",
    "df['Stable_family_income'] = label_encoder.fit_transform(df['Stable_family_income'])\n",
    "df['Living_with_parents'] = label_encoder.fit_transform(df['Living_with_parents'])\n",
    "df['Relative_or_acquaintance_infected_with_covid19'] = label_encoder.fit_transform(df['Relative_or_acquaintance_infected_with_covid19'])\n",
    "df['Worry_about_academic_delay'] = label_encoder.fit_transform(df['Worry_about_academic_delay'])\n",
    "df['Disruption_of_daily_life'] = label_encoder.fit_transform(df['Disruption_of_daily_life'])\n",
    "df['Exercise_during_covid19'] = label_encoder.fit_transform(df['Exercise_during_covid19'])\n",
    "df['Own_income'] = label_encoder.fit_transform(df['Own_income'])\n",
    "df['Quarrel_between_parents'] = label_encoder.fit_transform(df['Quarrel_between_parents'])\n",
    "df['Fear_of_getting_infected_with_covid19'] = label_encoder.fit_transform(df['Fear_of_getting_infected_with_covid19'])\n",
    "df['Mental_Health_Status'] = label_encoder.fit_transform(df['Mental_Health_Status'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Worry_about_social_support_during_covid19</th>\n",
       "      <th>Residence</th>\n",
       "      <th>Stable_family_income</th>\n",
       "      <th>Living_with_parents</th>\n",
       "      <th>Relative_or_acquaintance_infected_with_covid19</th>\n",
       "      <th>Worry_about_academic_delay</th>\n",
       "      <th>Disruption_of_daily_life</th>\n",
       "      <th>Exercise_during_covid19</th>\n",
       "      <th>Own_income</th>\n",
       "      <th>Quarrel_between_parents</th>\n",
       "      <th>Sleep_status_hour_during_covid19</th>\n",
       "      <th>Internet_browsing_hours_during_covid19</th>\n",
       "      <th>Fear_of_getting_infected_with_covid19</th>\n",
       "      <th>Mental_Health_Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>248</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>250</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>251</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>252</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>253 rows Ã— 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gender  Worry_about_social_support_during_covid19  Residence  \\\n",
       "0         1                                          1          1   \n",
       "1         1                                          1          0   \n",
       "2         1                                          1          1   \n",
       "3         0                                          1          1   \n",
       "4         1                                          1          1   \n",
       "..      ...                                        ...        ...   \n",
       "248       1                                          1          1   \n",
       "249       1                                          1          0   \n",
       "250       1                                          0          1   \n",
       "251       1                                          1          0   \n",
       "252       1                                          0          0   \n",
       "\n",
       "     Stable_family_income  Living_with_parents  \\\n",
       "0                       0                    1   \n",
       "1                       1                    1   \n",
       "2                       1                    0   \n",
       "3                       1                    1   \n",
       "4                       1                    1   \n",
       "..                    ...                  ...   \n",
       "248                     1                    1   \n",
       "249                     0                    1   \n",
       "250                     1                    1   \n",
       "251                     0                    0   \n",
       "252                     0                    0   \n",
       "\n",
       "     Relative_or_acquaintance_infected_with_covid19  \\\n",
       "0                                                 1   \n",
       "1                                                 1   \n",
       "2                                                 1   \n",
       "3                                                 0   \n",
       "4                                                 0   \n",
       "..                                              ...   \n",
       "248                                               1   \n",
       "249                                               1   \n",
       "250                                               0   \n",
       "251                                               0   \n",
       "252                                               0   \n",
       "\n",
       "     Worry_about_academic_delay  Disruption_of_daily_life  \\\n",
       "0                             1                         1   \n",
       "1                             1                         1   \n",
       "2                             1                         1   \n",
       "3                             1                         1   \n",
       "4                             1                         1   \n",
       "..                          ...                       ...   \n",
       "248                           1                         1   \n",
       "249                           1                         1   \n",
       "250                           1                         1   \n",
       "251                           1                         1   \n",
       "252                           1                         0   \n",
       "\n",
       "     Exercise_during_covid19  Own_income  Quarrel_between_parents  \\\n",
       "0                          0           1                        1   \n",
       "1                          0           0                        1   \n",
       "2                          0           0                        0   \n",
       "3                          0           0                        2   \n",
       "4                          0           0                        1   \n",
       "..                       ...         ...                      ...   \n",
       "248                        1           0                        1   \n",
       "249                        0           0                        1   \n",
       "250                        0           0                        1   \n",
       "251                        0           0                        1   \n",
       "252                        0           0                        1   \n",
       "\n",
       "     Sleep_status_hour_during_covid19  Internet_browsing_hours_during_covid19  \\\n",
       "0                                   2                                       3   \n",
       "1                                   2                                       4   \n",
       "2                                   1                                       3   \n",
       "3                                   2                                       3   \n",
       "4                                   3                                       4   \n",
       "..                                ...                                     ...   \n",
       "248                                 1                                       4   \n",
       "249                                 2                                       3   \n",
       "250                                 2                                       3   \n",
       "251                                 2                                       4   \n",
       "252                                 2                                       1   \n",
       "\n",
       "     Fear_of_getting_infected_with_covid19  Mental_Health_Status  \n",
       "0                                        1                     1  \n",
       "1                                        1                     1  \n",
       "2                                        1                     1  \n",
       "3                                        1                     2  \n",
       "4                                        1                     1  \n",
       "..                                     ...                   ...  \n",
       "248                                      1                     1  \n",
       "249                                      1                     1  \n",
       "250                                      1                     1  \n",
       "251                                      1                     2  \n",
       "252                                      0                     0  \n",
       "\n",
       "[253 rows x 15 columns]"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Split target and input variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = df.drop(['Mental_Health_Status'],axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Worry_about_social_support_during_covid19</th>\n",
       "      <th>Residence</th>\n",
       "      <th>Stable_family_income</th>\n",
       "      <th>Living_with_parents</th>\n",
       "      <th>Relative_or_acquaintance_infected_with_covid19</th>\n",
       "      <th>Worry_about_academic_delay</th>\n",
       "      <th>Disruption_of_daily_life</th>\n",
       "      <th>Exercise_during_covid19</th>\n",
       "      <th>Own_income</th>\n",
       "      <th>Quarrel_between_parents</th>\n",
       "      <th>Sleep_status_hour_during_covid19</th>\n",
       "      <th>Internet_browsing_hours_during_covid19</th>\n",
       "      <th>Fear_of_getting_infected_with_covid19</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>248</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>250</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>251</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>252</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>253 rows Ã— 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gender  Worry_about_social_support_during_covid19  Residence  \\\n",
       "0         1                                          1          1   \n",
       "1         1                                          1          0   \n",
       "2         1                                          1          1   \n",
       "3         0                                          1          1   \n",
       "4         1                                          1          1   \n",
       "..      ...                                        ...        ...   \n",
       "248       1                                          1          1   \n",
       "249       1                                          1          0   \n",
       "250       1                                          0          1   \n",
       "251       1                                          1          0   \n",
       "252       1                                          0          0   \n",
       "\n",
       "     Stable_family_income  Living_with_parents  \\\n",
       "0                       0                    1   \n",
       "1                       1                    1   \n",
       "2                       1                    0   \n",
       "3                       1                    1   \n",
       "4                       1                    1   \n",
       "..                    ...                  ...   \n",
       "248                     1                    1   \n",
       "249                     0                    1   \n",
       "250                     1                    1   \n",
       "251                     0                    0   \n",
       "252                     0                    0   \n",
       "\n",
       "     Relative_or_acquaintance_infected_with_covid19  \\\n",
       "0                                                 1   \n",
       "1                                                 1   \n",
       "2                                                 1   \n",
       "3                                                 0   \n",
       "4                                                 0   \n",
       "..                                              ...   \n",
       "248                                               1   \n",
       "249                                               1   \n",
       "250                                               0   \n",
       "251                                               0   \n",
       "252                                               0   \n",
       "\n",
       "     Worry_about_academic_delay  Disruption_of_daily_life  \\\n",
       "0                             1                         1   \n",
       "1                             1                         1   \n",
       "2                             1                         1   \n",
       "3                             1                         1   \n",
       "4                             1                         1   \n",
       "..                          ...                       ...   \n",
       "248                           1                         1   \n",
       "249                           1                         1   \n",
       "250                           1                         1   \n",
       "251                           1                         1   \n",
       "252                           1                         0   \n",
       "\n",
       "     Exercise_during_covid19  Own_income  Quarrel_between_parents  \\\n",
       "0                          0           1                        1   \n",
       "1                          0           0                        1   \n",
       "2                          0           0                        0   \n",
       "3                          0           0                        2   \n",
       "4                          0           0                        1   \n",
       "..                       ...         ...                      ...   \n",
       "248                        1           0                        1   \n",
       "249                        0           0                        1   \n",
       "250                        0           0                        1   \n",
       "251                        0           0                        1   \n",
       "252                        0           0                        1   \n",
       "\n",
       "     Sleep_status_hour_during_covid19  Internet_browsing_hours_during_covid19  \\\n",
       "0                                   2                                       3   \n",
       "1                                   2                                       4   \n",
       "2                                   1                                       3   \n",
       "3                                   2                                       3   \n",
       "4                                   3                                       4   \n",
       "..                                ...                                     ...   \n",
       "248                                 1                                       4   \n",
       "249                                 2                                       3   \n",
       "250                                 2                                       3   \n",
       "251                                 2                                       4   \n",
       "252                                 2                                       1   \n",
       "\n",
       "     Fear_of_getting_infected_with_covid19  \n",
       "0                                        1  \n",
       "1                                        1  \n",
       "2                                        1  \n",
       "3                                        1  \n",
       "4                                        1  \n",
       "..                                     ...  \n",
       "248                                      1  \n",
       "249                                      1  \n",
       "250                                      1  \n",
       "251                                      1  \n",
       "252                                      0  \n",
       "\n",
       "[253 rows x 14 columns]"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      1\n",
       "1      1\n",
       "2      1\n",
       "3      2\n",
       "4      1\n",
       "      ..\n",
       "248    1\n",
       "249    1\n",
       "250    1\n",
       "251    2\n",
       "252    0\n",
       "Name: Mental_Health_Status, Length: 253, dtype: int32"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = df['Mental_Health_Status']\n",
    "y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#  Split dataset into train and test sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=.2,random_state=43 )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model Apply ( RF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(n_estimators=30, random_state=51)"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rnf = RandomForestClassifier(n_estimators=30, random_state=51)\n",
    "rnf.fit(xtrain,ytrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training Accuracy :  0.9653465346534653\n",
      "\n",
      "Testing Accuracy :  0.47058823529411764\n",
      "\n",
      "Repeated 10-Folds Cross-Validation for Model Evaluation :\n",
      "\n",
      "Mean Accuracy: 0.472 (0.083)\n"
     ]
    }
   ],
   "source": [
    "# Accuracy on Training \n",
    "predictions_train = rnf.predict(xtrain)\n",
    "print(\"\\nTraining Accuracy : \", accuracy_score(ytrain,predictions_train))\n",
    "# Accuracy on Testing\n",
    "predictions_test = rnf.predict(xtest)\n",
    "print(\"\\nTesting Accuracy : \", accuracy_score(ytest,predictions_test))\n",
    "\n",
    "# define the evaluation method\n",
    "print('\\nRepeated 10-Folds Cross-Validation for Model Evaluation :\\n')\n",
    "cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
    "# evaluate the model on the dataset\n",
    "n_scores = cross_val_score(rnf, x, y, scoring='accuracy', cv=cv, n_jobs=-1)\n",
    "# report performance\n",
    "print('Mean Accuracy: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# K Neighbors Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training Accuracy :  0.6831683168316832\n",
      "\n",
      "Testing Accuracy :  0.45098039215686275\n"
     ]
    }
   ],
   "source": [
    "# K Neighbors Classifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "classifier= KNeighborsClassifier(n_neighbors=4, metric='minkowski', p=2 )  \n",
    "classifier.fit(xtrain, ytrain)  \n",
    "\n",
    "# Accuracy on Training \n",
    "predictions_train = classifier.predict(xtrain)\n",
    "print(\"\\nTraining Accuracy : \", accuracy_score(ytrain,predictions_train))\n",
    "# Accuracy on Testing\n",
    "predictions_test = classifier.predict(xtest)\n",
    "print(\"\\nTesting Accuracy : \", accuracy_score(ytest,predictions_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(gamma='auto')"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svm_model = SVC(gamma = 'auto')\n",
    "svm_model.fit(xtrain,ytrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training Accuracy :  0.5891089108910891\n",
      "\n",
      "Testing Accuracy :  0.5294117647058824\n"
     ]
    }
   ],
   "source": [
    "# Accuracy on Training \n",
    "predictions_train = svm_model.predict(xtrain)\n",
    "print(\"\\nTraining Accuracy : \", accuracy_score(ytrain,predictions_train))\n",
    "# Accuracy on Testing\n",
    "predictions_test = svm_model.predict(xtest)\n",
    "print(\"\\nTesting Accuracy : \", accuracy_score(ytest,predictions_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MultinomialNB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultinomialNB()"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.naive_bayes import MultinomialNB\n",
    "nbmodel = MultinomialNB()\n",
    "nbmodel.fit(xtrain,ytrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training Accuracy :  0.5544554455445545\n",
      "\n",
      "Testing Accuracy :  0.5490196078431373\n"
     ]
    }
   ],
   "source": [
    "# Accuracy on Training \n",
    "predictions_train = nbmodel.predict(xtrain)\n",
    "print(\"\\nTraining Accuracy : \", accuracy_score(ytrain,predictions_train))\n",
    "# Accuracy on Testing\n",
    "predictions_test = nbmodel.predict(xtest)\n",
    "print(\"\\nTesting Accuracy : \", accuracy_score(ytest,predictions_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "lrmodel = LogisticRegression()\n",
    "lrmodel.fit(xtrain,ytrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training Accuracy :  0.6039603960396039\n",
      "\n",
      "Testing Accuracy :  0.45098039215686275\n"
     ]
    }
   ],
   "source": [
    "# Accuracy on Training \n",
    "predictions_train = lrmodel.predict(xtrain)\n",
    "print(\"\\nTraining Accuracy : \", accuracy_score(ytrain,predictions_train))\n",
    "# Accuracy on Testing\n",
    "predictions_test = lrmodel.predict(xtest)\n",
    "print(\"\\nTesting Accuracy : \", accuracy_score(ytest,predictions_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Catboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_features = np.where(xtrain.dtypes != np.float)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Learning rate set to 0.5\n",
      "0:\tlearn: 0.9950728\ttotal: 18.6ms\tremaining: 1.84s\n",
      "1:\tlearn: 0.9408639\ttotal: 58.3ms\tremaining: 2.85s\n",
      "2:\tlearn: 0.9150176\ttotal: 71.2ms\tremaining: 2.3s\n",
      "3:\tlearn: 0.8810949\ttotal: 105ms\tremaining: 2.52s\n",
      "4:\tlearn: 0.8388062\ttotal: 152ms\tremaining: 2.89s\n",
      "5:\tlearn: 0.8316516\ttotal: 175ms\tremaining: 2.74s\n",
      "6:\tlearn: 0.8171983\ttotal: 196ms\tremaining: 2.61s\n",
      "7:\tlearn: 0.7801657\ttotal: 221ms\tremaining: 2.54s\n",
      "8:\tlearn: 0.7723029\ttotal: 251ms\tremaining: 2.54s\n",
      "9:\tlearn: 0.7500850\ttotal: 272ms\tremaining: 2.45s\n",
      "10:\tlearn: 0.7247502\ttotal: 292ms\tremaining: 2.36s\n",
      "11:\tlearn: 0.7151490\ttotal: 328ms\tremaining: 2.41s\n",
      "12:\tlearn: 0.7027250\ttotal: 360ms\tremaining: 2.41s\n",
      "13:\tlearn: 0.6835683\ttotal: 392ms\tremaining: 2.4s\n",
      "14:\tlearn: 0.6544457\ttotal: 427ms\tremaining: 2.42s\n",
      "15:\tlearn: 0.6257862\ttotal: 453ms\tremaining: 2.38s\n",
      "16:\tlearn: 0.6110469\ttotal: 485ms\tremaining: 2.37s\n",
      "17:\tlearn: 0.5859950\ttotal: 526ms\tremaining: 2.4s\n",
      "18:\tlearn: 0.5723027\ttotal: 565ms\tremaining: 2.41s\n",
      "19:\tlearn: 0.5413570\ttotal: 589ms\tremaining: 2.36s\n",
      "20:\tlearn: 0.5288324\ttotal: 626ms\tremaining: 2.35s\n",
      "21:\tlearn: 0.5197418\ttotal: 654ms\tremaining: 2.32s\n",
      "22:\tlearn: 0.4998832\ttotal: 688ms\tremaining: 2.3s\n",
      "23:\tlearn: 0.4760783\ttotal: 719ms\tremaining: 2.28s\n",
      "24:\tlearn: 0.4587180\ttotal: 742ms\tremaining: 2.23s\n",
      "25:\tlearn: 0.4492427\ttotal: 766ms\tremaining: 2.18s\n",
      "26:\tlearn: 0.4427087\ttotal: 797ms\tremaining: 2.15s\n",
      "27:\tlearn: 0.4350553\ttotal: 818ms\tremaining: 2.1s\n",
      "28:\tlearn: 0.4303031\ttotal: 847ms\tremaining: 2.07s\n",
      "29:\tlearn: 0.4191622\ttotal: 879ms\tremaining: 2.05s\n",
      "30:\tlearn: 0.4068489\ttotal: 909ms\tremaining: 2.02s\n",
      "31:\tlearn: 0.3964244\ttotal: 938ms\tremaining: 1.99s\n",
      "32:\tlearn: 0.3830757\ttotal: 963ms\tremaining: 1.96s\n",
      "33:\tlearn: 0.3749520\ttotal: 1000ms\tremaining: 1.94s\n",
      "34:\tlearn: 0.3639182\ttotal: 1.04s\tremaining: 1.93s\n",
      "35:\tlearn: 0.3591203\ttotal: 1.07s\tremaining: 1.9s\n",
      "36:\tlearn: 0.3528452\ttotal: 1.09s\tremaining: 1.86s\n",
      "37:\tlearn: 0.3505285\ttotal: 1.11s\tremaining: 1.81s\n",
      "38:\tlearn: 0.3408401\ttotal: 1.14s\tremaining: 1.78s\n",
      "39:\tlearn: 0.3341470\ttotal: 1.16s\tremaining: 1.74s\n",
      "40:\tlearn: 0.3278002\ttotal: 1.2s\tremaining: 1.72s\n",
      "41:\tlearn: 0.3203362\ttotal: 1.23s\tremaining: 1.7s\n",
      "42:\tlearn: 0.3120787\ttotal: 1.26s\tremaining: 1.67s\n",
      "43:\tlearn: 0.3053582\ttotal: 1.29s\tremaining: 1.65s\n",
      "44:\tlearn: 0.3003220\ttotal: 1.33s\tremaining: 1.63s\n",
      "45:\tlearn: 0.2957705\ttotal: 1.36s\tremaining: 1.59s\n",
      "46:\tlearn: 0.2868924\ttotal: 1.38s\tremaining: 1.55s\n",
      "47:\tlearn: 0.2816504\ttotal: 1.4s\tremaining: 1.52s\n",
      "48:\tlearn: 0.2788538\ttotal: 1.43s\tremaining: 1.49s\n",
      "49:\tlearn: 0.2737146\ttotal: 1.46s\tremaining: 1.46s\n",
      "50:\tlearn: 0.2690441\ttotal: 1.48s\tremaining: 1.43s\n",
      "51:\tlearn: 0.2651561\ttotal: 1.52s\tremaining: 1.4s\n",
      "52:\tlearn: 0.2586039\ttotal: 1.58s\tremaining: 1.4s\n",
      "53:\tlearn: 0.2554348\ttotal: 1.62s\tremaining: 1.38s\n",
      "54:\tlearn: 0.2498534\ttotal: 1.64s\tremaining: 1.34s\n",
      "55:\tlearn: 0.2471147\ttotal: 1.67s\tremaining: 1.31s\n",
      "56:\tlearn: 0.2451778\ttotal: 1.7s\tremaining: 1.28s\n",
      "57:\tlearn: 0.2385296\ttotal: 1.73s\tremaining: 1.25s\n",
      "58:\tlearn: 0.2323774\ttotal: 1.77s\tremaining: 1.23s\n",
      "59:\tlearn: 0.2308481\ttotal: 1.81s\tremaining: 1.21s\n",
      "60:\tlearn: 0.2290897\ttotal: 1.84s\tremaining: 1.18s\n",
      "61:\tlearn: 0.2260780\ttotal: 1.87s\tremaining: 1.15s\n",
      "62:\tlearn: 0.2209228\ttotal: 1.89s\tremaining: 1.11s\n",
      "63:\tlearn: 0.2187039\ttotal: 1.93s\tremaining: 1.08s\n",
      "64:\tlearn: 0.2165228\ttotal: 1.95s\tremaining: 1.05s\n",
      "65:\tlearn: 0.2108388\ttotal: 1.99s\tremaining: 1.02s\n",
      "66:\tlearn: 0.2039592\ttotal: 2.01s\tremaining: 991ms\n",
      "67:\tlearn: 0.2009798\ttotal: 2.04s\tremaining: 959ms\n",
      "68:\tlearn: 0.1977557\ttotal: 2.06s\tremaining: 927ms\n",
      "69:\tlearn: 0.1932893\ttotal: 2.1s\tremaining: 901ms\n",
      "70:\tlearn: 0.1878327\ttotal: 2.13s\tremaining: 869ms\n",
      "71:\tlearn: 0.1866765\ttotal: 2.15s\tremaining: 838ms\n",
      "72:\tlearn: 0.1841266\ttotal: 2.18s\tremaining: 808ms\n",
      "73:\tlearn: 0.1829158\ttotal: 2.21s\tremaining: 777ms\n",
      "74:\tlearn: 0.1794452\ttotal: 2.24s\tremaining: 746ms\n",
      "75:\tlearn: 0.1762199\ttotal: 2.27s\tremaining: 717ms\n",
      "76:\tlearn: 0.1725426\ttotal: 2.3s\tremaining: 688ms\n",
      "77:\tlearn: 0.1697524\ttotal: 2.34s\tremaining: 660ms\n",
      "78:\tlearn: 0.1676674\ttotal: 2.39s\tremaining: 637ms\n",
      "79:\tlearn: 0.1647318\ttotal: 2.42s\tremaining: 605ms\n",
      "80:\tlearn: 0.1616625\ttotal: 2.45s\tremaining: 574ms\n",
      "81:\tlearn: 0.1574418\ttotal: 2.47s\tremaining: 542ms\n",
      "82:\tlearn: 0.1557786\ttotal: 2.5s\tremaining: 513ms\n",
      "83:\tlearn: 0.1545707\ttotal: 2.53s\tremaining: 483ms\n",
      "84:\tlearn: 0.1520743\ttotal: 2.56s\tremaining: 453ms\n",
      "85:\tlearn: 0.1498467\ttotal: 2.58s\tremaining: 421ms\n",
      "86:\tlearn: 0.1473845\ttotal: 2.61s\tremaining: 390ms\n",
      "87:\tlearn: 0.1438106\ttotal: 2.64s\tremaining: 360ms\n",
      "88:\tlearn: 0.1424100\ttotal: 2.69s\tremaining: 333ms\n",
      "89:\tlearn: 0.1413752\ttotal: 2.73s\tremaining: 304ms\n",
      "90:\tlearn: 0.1387417\ttotal: 2.75s\tremaining: 272ms\n",
      "91:\tlearn: 0.1363633\ttotal: 2.8s\tremaining: 243ms\n",
      "92:\tlearn: 0.1345863\ttotal: 2.83s\tremaining: 213ms\n",
      "93:\tlearn: 0.1329987\ttotal: 2.86s\tremaining: 183ms\n",
      "94:\tlearn: 0.1305656\ttotal: 2.89s\tremaining: 152ms\n",
      "95:\tlearn: 0.1297417\ttotal: 2.92s\tremaining: 122ms\n",
      "96:\tlearn: 0.1281108\ttotal: 2.96s\tremaining: 91.6ms\n",
      "97:\tlearn: 0.1260314\ttotal: 3s\tremaining: 61.1ms\n",
      "98:\tlearn: 0.1245282\ttotal: 3.03s\tremaining: 30.6ms\n",
      "99:\tlearn: 0.1227314\ttotal: 3.06s\tremaining: 0us\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<catboost.core.CatBoostClassifier at 0x1c5fd4bf6d0>"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "catmodel = CatBoostClassifier(iterations=100)\n",
    "catmodel.fit(xtrain,ytrain, cat_features = cat_features,plot=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training Accuracy :  0.7475247524752475\n",
      "\n",
      "Testing Accuracy :  0.49019607843137253\n"
     ]
    }
   ],
   "source": [
    "# Accuracy on Training \n",
    "predictions_train = catmodel.predict(xtrain)\n",
    "print(\"\\nTraining Accuracy : \", accuracy_score(ytrain,predictions_train))\n",
    "# Accuracy on Testing\n",
    "predictions_test = catmodel.predict(xtest)\n",
    "print(\"\\nTesting Accuracy : \", accuracy_score(ytest,predictions_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Light GBM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[20]\ttraining's multi_logloss: 0.780388\tvalid_0's multi_logloss: 1.05519\n",
      "[40]\ttraining's multi_logloss: 0.700281\tvalid_0's multi_logloss: 1.12262\n",
      "[60]\ttraining's multi_logloss: 0.6482\tvalid_0's multi_logloss: 1.19088\n",
      "[80]\ttraining's multi_logloss: 0.608406\tvalid_0's multi_logloss: 1.23648\n",
      "[100]\ttraining's multi_logloss: 0.567219\tvalid_0's multi_logloss: 1.27395\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'verbose' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LGBMClassifier(learning_rate=0.09, max_depth=-5, random_state=42)"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import lightgbm as lgb\n",
    "model = lgb.LGBMClassifier(learning_rate=0.09,max_depth=-5,random_state=42)\n",
    "model.fit(xtrain,ytrain,eval_set=[(xtest,ytest),(xtrain,ytrain)],\n",
    "          verbose=20,eval_metric='logloss')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training accuracy 0.7822\n",
      "Testing accuracy 0.4314\n"
     ]
    }
   ],
   "source": [
    "print('Training accuracy {:.4f}'.format(model.score(xtrain,ytrain)))\n",
    "print('Testing accuracy {:.4f}'.format(model.score(xtest,ytest)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# XG boost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1].\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[22:01:41] WARNING: C:/Users/Administrator/workspace/xgboost-win64_release_1.4.0/src/learner.cc:1095: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "\n",
      "Training Accuracy : 0.9653465346534653\n",
      "\n",
      "Testing Accuracy : 0.37254901960784315\n"
     ]
    }
   ],
   "source": [
    "from xgboost import XGBClassifier\n",
    "classifier=XGBClassifier()\n",
    "classifier.fit(xtrain,ytrain)\n",
    "predictions_train =classifier.predict(xtrain)\n",
    "acc=accuracy_score(ytrain, predictions_train)\n",
    "print('\\nTraining Accuracy :', acc)\n",
    "predictions_test = classifier.predict(xtest)\n",
    "accc=accuracy_score(ytest, predictions_test)\n",
    "print('\\nTesting Accuracy :', accc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Univariate Selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Univariate Selection\n",
    "from sklearn.feature_selection import SelectKBest\n",
    "from sklearn.feature_selection import chi2\n",
    "from sklearn.feature_selection import f_classif"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "#apply SelectKBest class to extract top 10 best features\n",
    "bestfeatures = SelectKBest(score_func = f_classif, k=14)\n",
    "fit = bestfeatures.fit(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfscores = pd.DataFrame(fit.scores_)\n",
    "dfcolumns = pd.DataFrame(x.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                          Features      Score\n",
      "7                         Disruption_of_daily_life  19.945931\n",
      "1        Worry_about_social_support_during_covid19  15.081741\n",
      "6                       Worry_about_academic_delay  13.919069\n",
      "13           Fear_of_getting_infected_with_covid19  13.727998\n",
      "10                         Quarrel_between_parents   9.101468\n",
      "3                             Stable_family_income   5.135266\n",
      "9                                       Own_income   2.545494\n",
      "0                                           Gender   1.342582\n",
      "8                          Exercise_during_covid19   1.235411\n",
      "11                Sleep_status_hour_during_covid19   0.784432\n",
      "2                                        Residence   0.770495\n",
      "4                              Living_with_parents   0.406622\n",
      "5   Relative_or_acquaintance_infected_with_covid19   0.342384\n",
      "12          Internet_browsing_hours_during_covid19   0.316528\n"
     ]
    }
   ],
   "source": [
    "#concat two dataframes for better visualization \n",
    "featureScores = pd.concat([dfcolumns,dfscores],axis=1)\n",
    "featureScores.columns = ['Features','Score']  #naming the dataframe columns\n",
    "print(featureScores.nlargest(14,'Score')) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature Importance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ExtraTreesClassifier()"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import ExtraTreesClassifier\n",
    "import matplotlib.pyplot as plt\n",
    "model = ExtraTreesClassifier()\n",
    "model.fit(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot graph of feature importances for better visualization\n",
    "feat_impotances = pd.Series(model.feature_importances_, index = x.columns)\n",
    "feat_impotances.nlargest(14).plot(kind='barh')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x511.2 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "explainer = shap.TreeExplainer(model)\n",
    "shap_values = explainer.shap_values(x)\n",
    "shap.summary_plot(shap_values, x, plot_type='bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Shap values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ntree_limit is deprecated, use `iteration_range` or model slicing instead.\n"
     ]
    }
   ],
   "source": [
    "explainer = shap.TreeExplainer(classifier)\n",
    "shap_values = explainer.shap_values(xtrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x511.2 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "shap.summary_plot(shap_values, xtrain, plot_type='bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Worry_about_social_support_during_covid19</th>\n",
       "      <th>Residence</th>\n",
       "      <th>Stable_family_income</th>\n",
       "      <th>Living_with_parents</th>\n",
       "      <th>Relative_or_acquaintance_infected_with_covid19</th>\n",
       "      <th>Worry_about_academic_delay</th>\n",
       "      <th>Disruption_of_daily_life</th>\n",
       "      <th>Exercise_during_covid19</th>\n",
       "      <th>Own_income</th>\n",
       "      <th>Quarrel_between_parents</th>\n",
       "      <th>Sleep_status_hour_during_covid19</th>\n",
       "      <th>Fear_of_getting_infected_with_covid19</th>\n",
       "      <th>Mental_Health_Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>248</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>250</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>251</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>252</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>253 rows Ã— 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gender  Worry_about_social_support_during_covid19  Residence  \\\n",
       "0         1                                          1          1   \n",
       "1         1                                          1          0   \n",
       "2         1                                          1          1   \n",
       "3         0                                          1          1   \n",
       "4         1                                          1          1   \n",
       "..      ...                                        ...        ...   \n",
       "248       1                                          1          1   \n",
       "249       1                                          1          0   \n",
       "250       1                                          0          1   \n",
       "251       1                                          1          0   \n",
       "252       1                                          0          0   \n",
       "\n",
       "     Stable_family_income  Living_with_parents  \\\n",
       "0                       0                    1   \n",
       "1                       1                    1   \n",
       "2                       1                    0   \n",
       "3                       1                    1   \n",
       "4                       1                    1   \n",
       "..                    ...                  ...   \n",
       "248                     1                    1   \n",
       "249                     0                    1   \n",
       "250                     1                    1   \n",
       "251                     0                    0   \n",
       "252                     0                    0   \n",
       "\n",
       "     Relative_or_acquaintance_infected_with_covid19  \\\n",
       "0                                                 1   \n",
       "1                                                 1   \n",
       "2                                                 1   \n",
       "3                                                 0   \n",
       "4                                                 0   \n",
       "..                                              ...   \n",
       "248                                               1   \n",
       "249                                               1   \n",
       "250                                               0   \n",
       "251                                               0   \n",
       "252                                               0   \n",
       "\n",
       "     Worry_about_academic_delay  Disruption_of_daily_life  \\\n",
       "0                             1                         1   \n",
       "1                             1                         1   \n",
       "2                             1                         1   \n",
       "3                             1                         1   \n",
       "4                             1                         1   \n",
       "..                          ...                       ...   \n",
       "248                           1                         1   \n",
       "249                           1                         1   \n",
       "250                           1                         1   \n",
       "251                           1                         1   \n",
       "252                           1                         0   \n",
       "\n",
       "     Exercise_during_covid19  Own_income  Quarrel_between_parents  \\\n",
       "0                          0           1                        1   \n",
       "1                          0           0                        1   \n",
       "2                          0           0                        0   \n",
       "3                          0           0                        2   \n",
       "4                          0           0                        1   \n",
       "..                       ...         ...                      ...   \n",
       "248                        1           0                        1   \n",
       "249                        0           0                        1   \n",
       "250                        0           0                        1   \n",
       "251                        0           0                        1   \n",
       "252                        0           0                        1   \n",
       "\n",
       "     Sleep_status_hour_during_covid19  Fear_of_getting_infected_with_covid19  \\\n",
       "0                                   2                                      1   \n",
       "1                                   2                                      1   \n",
       "2                                   1                                      1   \n",
       "3                                   2                                      1   \n",
       "4                                   3                                      1   \n",
       "..                                ...                                    ...   \n",
       "248                                 1                                      1   \n",
       "249                                 2                                      1   \n",
       "250                                 2                                      1   \n",
       "251                                 2                                      1   \n",
       "252                                 2                                      0   \n",
       "\n",
       "     Mental_Health_Status  \n",
       "0                       1  \n",
       "1                       1  \n",
       "2                       1  \n",
       "3                       2  \n",
       "4                       1  \n",
       "..                    ...  \n",
       "248                     1  \n",
       "249                     1  \n",
       "250                     1  \n",
       "251                     2  \n",
       "252                     0  \n",
       "\n",
       "[253 rows x 14 columns]"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xx = df.drop(['Internet_browsing_hours_during_covid19'],axis = 1) \n",
    "xx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Worry_about_social_support_during_covid19</th>\n",
       "      <th>Residence</th>\n",
       "      <th>Stable_family_income</th>\n",
       "      <th>Living_with_parents</th>\n",
       "      <th>Relative_or_acquaintance_infected_with_covid19</th>\n",
       "      <th>Worry_about_academic_delay</th>\n",
       "      <th>Disruption_of_daily_life</th>\n",
       "      <th>Exercise_during_covid19</th>\n",
       "      <th>Own_income</th>\n",
       "      <th>Quarrel_between_parents</th>\n",
       "      <th>Sleep_status_hour_during_covid19</th>\n",
       "      <th>Fear_of_getting_infected_with_covid19</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>248</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>250</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>251</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>252</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>253 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Gender  Worry_about_social_support_during_covid19  Residence  \\\n",
       "0         1                                          1          1   \n",
       "1         1                                          1          0   \n",
       "2         1                                          1          1   \n",
       "3         0                                          1          1   \n",
       "4         1                                          1          1   \n",
       "..      ...                                        ...        ...   \n",
       "248       1                                          1          1   \n",
       "249       1                                          1          0   \n",
       "250       1                                          0          1   \n",
       "251       1                                          1          0   \n",
       "252       1                                          0          0   \n",
       "\n",
       "     Stable_family_income  Living_with_parents  \\\n",
       "0                       0                    1   \n",
       "1                       1                    1   \n",
       "2                       1                    0   \n",
       "3                       1                    1   \n",
       "4                       1                    1   \n",
       "..                    ...                  ...   \n",
       "248                     1                    1   \n",
       "249                     0                    1   \n",
       "250                     1                    1   \n",
       "251                     0                    0   \n",
       "252                     0                    0   \n",
       "\n",
       "     Relative_or_acquaintance_infected_with_covid19  \\\n",
       "0                                                 1   \n",
       "1                                                 1   \n",
       "2                                                 1   \n",
       "3                                                 0   \n",
       "4                                                 0   \n",
       "..                                              ...   \n",
       "248                                               1   \n",
       "249                                               1   \n",
       "250                                               0   \n",
       "251                                               0   \n",
       "252                                               0   \n",
       "\n",
       "     Worry_about_academic_delay  Disruption_of_daily_life  \\\n",
       "0                             1                         1   \n",
       "1                             1                         1   \n",
       "2                             1                         1   \n",
       "3                             1                         1   \n",
       "4                             1                         1   \n",
       "..                          ...                       ...   \n",
       "248                           1                         1   \n",
       "249                           1                         1   \n",
       "250                           1                         1   \n",
       "251                           1                         1   \n",
       "252                           1                         0   \n",
       "\n",
       "     Exercise_during_covid19  Own_income  Quarrel_between_parents  \\\n",
       "0                          0           1                        1   \n",
       "1                          0           0                        1   \n",
       "2                          0           0                        0   \n",
       "3                          0           0                        2   \n",
       "4                          0           0                        1   \n",
       "..                       ...         ...                      ...   \n",
       "248                        1           0                        1   \n",
       "249                        0           0                        1   \n",
       "250                        0           0                        1   \n",
       "251                        0           0                        1   \n",
       "252                        0           0                        1   \n",
       "\n",
       "     Sleep_status_hour_during_covid19  Fear_of_getting_infected_with_covid19  \n",
       "0                                   2                                      1  \n",
       "1                                   2                                      1  \n",
       "2                                   1                                      1  \n",
       "3                                   2                                      1  \n",
       "4                                   3                                      1  \n",
       "..                                ...                                    ...  \n",
       "248                                 1                                      1  \n",
       "249                                 2                                      1  \n",
       "250                                 2                                      1  \n",
       "251                                 2                                      1  \n",
       "252                                 2                                      0  \n",
       "\n",
       "[253 rows x 13 columns]"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xxx = xx.drop(['Mental_Health_Status'],axis = 1) \n",
    "xxx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      1\n",
       "1      1\n",
       "2      1\n",
       "3      2\n",
       "4      1\n",
       "      ..\n",
       "248    1\n",
       "249    1\n",
       "250    1\n",
       "251    2\n",
       "252    0\n",
       "Name: Mental_Health_Status, Length: 253, dtype: int32"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yy = df['Mental_Health_Status']\n",
    "yy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train and test sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train,x_test,y_train,y_test = train_test_split(xxx,yy,test_size=.3,random_state = 2021 )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rnf = RandomForestClassifier(n_estimators=100, random_state=40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(random_state=40)"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rnf.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training Accuracy :  0.9152542372881356\n",
      "\n",
      "Testing Accuracy :  0.5\n",
      "\n",
      "Repeated 5-Folds Cross-Validation for Model Evaluation :\n",
      "\n",
      "Mean Accuracy: 0.454 (0.067)\n"
     ]
    }
   ],
   "source": [
    "# Accuracy on Training \n",
    "predictions_train = rnf.predict(x_train)\n",
    "print(\"\\nTraining Accuracy : \", accuracy_score(y_train,predictions_train))\n",
    "# Accuracy on Testing\n",
    "predictions_test = rnf.predict(x_test)\n",
    "print(\"\\nTesting Accuracy : \", accuracy_score(y_test,predictions_test))\n",
    "\n",
    "# define the evaluation method\n",
    "print('\\nRepeated 5-Folds Cross-Validation for Model Evaluation :\\n')\n",
    "cv = RepeatedStratifiedKFold(n_splits=5, n_repeats=3, random_state=1)\n",
    "# evaluate the model on the dataset\n",
    "n_scores = cross_val_score(rnf, xxx, yy, scoring='accuracy', cv=cv, n_jobs=-1)\n",
    "# report performance\n",
    "print('Mean Accuracy: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x482.4 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Shap Values of Random Forest\n",
    "explainer = shap.TreeExplainer(rnf)\n",
    "shap_values = explainer.shap_values(x_train)\n",
    "shap.summary_plot(shap_values, x_train, plot_type='bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# K Neighbors Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training Accuracy :  0.5988700564971752\n",
      "\n",
      "Testing Accuracy :  0.4605263157894737\n"
     ]
    }
   ],
   "source": [
    "# K Neighbors Classifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "classifier= KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2 )  \n",
    "classifier.fit(x_train, y_train)  \n",
    "\n",
    "# Accuracy on Training \n",
    "predictions_train = classifier.predict(x_train)\n",
    "print(\"\\nTraining Accuracy : \", accuracy_score(y_train,predictions_train))\n",
    "# Accuracy on Testing\n",
    "predictions_test = classifier.predict(x_test)\n",
    "print(\"\\nTesting Accuracy : \", accuracy_score(y_test,predictions_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(gamma='auto')"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svm_model = SVC(gamma = 'auto')\n",
    "svm_model.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training Accuracy :  0.5536723163841808\n",
      "\n",
      "Testing Accuracy :  0.5263157894736842\n",
      "\n",
      "Repeated 10-Folds Cross-Validation for Model Evaluation :\n",
      "\n",
      "Mean Accuracy: 0.532 (0.047)\n"
     ]
    }
   ],
   "source": [
    "# Accuracy on Training \n",
    "predictions_train = svm_model.predict(x_train)\n",
    "print(\"\\nTraining Accuracy : \", accuracy_score(y_train,predictions_train))\n",
    "# Accuracy on Testing\n",
    "predictions_test = svm_model.predict(x_test)\n",
    "print(\"\\nTesting Accuracy : \", accuracy_score(y_test,predictions_test))\n",
    "\n",
    "# define the evaluation method\n",
    "print('\\nRepeated 5-Folds Cross-Validation for Model Evaluation :\\n')\n",
    "cv = RepeatedStratifiedKFold(n_splits=5, n_repeats=3, random_state=1)\n",
    "# evaluate the model on the dataset\n",
    "n_scores = cross_val_score(svm_model, xxx, yy, scoring='accuracy', cv=cv, n_jobs=-1)\n",
    "# report performance\n",
    "print('Mean Accuracy: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "lrmodel = LogisticRegression()\n",
    "lrmodel.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training Accuracy :  0.576271186440678\n",
      "\n",
      "Testing Accuracy :  0.5526315789473685\n",
      "\n",
      "Repeated 10-Folds Cross-Validation for Model Evaluation :\n",
      "\n",
      "Mean Accuracy: 0.505 (0.050)\n"
     ]
    }
   ],
   "source": [
    "# Accuracy on Training \n",
    "predictions_train = lrmodel.predict(x_train)\n",
    "print(\"\\nTraining Accuracy : \", accuracy_score(y_train,predictions_train))\n",
    "# Accuracy on Testing\n",
    "predictions_test = lrmodel.predict(x_test)\n",
    "print(\"\\nTesting Accuracy : \", accuracy_score(y_test,predictions_test))\n",
    "\n",
    "# define the evaluation method\n",
    "print('\\nRepeated 5-Folds Cross-Validation for Model Evaluation :\\n')\n",
    "cv = RepeatedStratifiedKFold(n_splits=5, n_repeats=3, random_state=1)\n",
    "# evaluate the model on the dataset\n",
    "n_scores = cross_val_score(lrmodel, xxx, yy, scoring='accuracy', cv=cv, n_jobs=-1)\n",
    "# report performance\n",
    "print('Mean Accuracy: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# XG boost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1].\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[22:06:20] WARNING: C:/Users/Administrator/workspace/xgboost-win64_release_1.4.0/src/learner.cc:1095: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "\n",
      "Training Accuracy : 0.9152542372881356\n",
      "\n",
      "Testing Accuracy : 0.4473684210526316\n",
      "\n",
      "Repeated 5-Folds Cross-Validation for Model Evaluation :\n",
      "\n",
      "Mean Accuracy: 0.457 (0.066)\n"
     ]
    }
   ],
   "source": [
    "from xgboost import XGBClassifier\n",
    "classifier=XGBClassifier()\n",
    "classifier.fit(x_train,y_train)\n",
    "predictions_train =classifier.predict(x_train)\n",
    "acc=accuracy_score(y_train, predictions_train)\n",
    "print('\\nTraining Accuracy :', acc)\n",
    "predictions_test = classifier.predict(x_test)\n",
    "accc=accuracy_score(y_test, predictions_test)\n",
    "print('\\nTesting Accuracy :', accc)\n",
    "\n",
    "# define the evaluation method\n",
    "print('\\nRepeated 5-Folds Cross-Validation for Model Evaluation :\\n')\n",
    "cv = RepeatedStratifiedKFold(n_splits=5, n_repeats=3, random_state=1)\n",
    "# evaluate the model on the dataset\n",
    "n_scores = cross_val_score(classifier, xxx, yy, scoring='accuracy', cv=cv, n_jobs=-1)\n",
    "# report performance\n",
    "print('Mean Accuracy: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
